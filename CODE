import sys
print("Python executable:", sys.executable)

import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

# Parameters
ticker = 'AAPL'
start_date = '2020-01-01'
end_date = '2024-12-31'
num_simulations = 1000
num_days = 252  # Trading days in a year

# Download stock data
data = yf.download(ticker, start=start_date, end=end_date)

# Ensure data is not empty
if data.empty:
    raise ValueError("Failed to download stock data. Check the ticker or your internet connection.")

# Calculate log returns
log_returns = np.log(1 + data['Adj Close'].pct_change().dropna())

# Calculate drift and volatility
mu = log_returns.mean()
sigma = log_returns.std()
drift = mu - (0.5 * sigma**2)

# Starting price
S0 = data['Adj Close'].iloc[-1]

# Run simulations
simulation = np.zeros((num_days, num_simulations))
for i in range(num_simulations):
    random_returns = np.random.normal(0, 1, size=num_days)
    daily_returns = np.exp(drift + sigma * random_returns)
    simulation[:, i] = S0 * daily_returns.cumprod()

# Plot simulation results
plt.figure(figsize=(12, 6))
plt.plot(simulation, linewidth=0.5)
plt.title(f'{ticker} Stock Price Prediction using Monte Carlo Simulation')
plt.xlabel('Trading Days')
plt.ylabel('Price')
plt.grid(True)
plt.tight_layout()
plt.show()
